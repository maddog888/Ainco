//  Created by ÈòøÈáë on 2023/3/14.
//  ‰∏ªÈ°µÈù¢Êñá‰ª∂

import SwiftUI

struct AppView: View {
    @Binding var showScanView: Bool  //ÊòæÁ§∫Áä∂ÊÄÅ
    @Binding var progress: Double   //ËøõÂ∫¶Êù°
    @Binding var appURLs: [URL] //APPË∑ØÂæÑ
    @Binding var appIcons: [NSImage]    //APP_LOGO
    @Binding var appNames: [String] //APPÂêçÂ≠ó
    @Binding var appInfos: Dictionary<Int,Dictionary<Int,String>> //APP‰ø°ÊÅØ
    @Binding var appFiles: Dictionary<Int,Dictionary<Int,Dictionary<Int,String>>> //APPÂÖ≥ËÅîÊñá‰ª∂
    
    @Binding var appCount: Int //ÊÄªAPPÊï∞
    @Binding var selectedApps: Set<Int>   //ÂΩìÂâçÈÄâ‰∏≠È°π

    @Binding var isRunningb: Bool    //Âç∏ËΩΩÊåâÈíÆÁä∂ÊÄÅ
    
    @State private var buttonColor = "eb4e3d" //ÊåâÈíÆÈ¢úËâ≤
    @State private var buttonColorb = "ais" //ÊåâÈíÆÈ¢úËâ≤
    @State private var isRunning = false    //ÊåâÈíÆÁä∂ÊÄÅ
    
    @State private var selectedFiles = Set<Int>()   //Êñá‰ª∂ÈÄâ‰∏≠È°π
    
    var body: some View {
        //ËæìÂá∫‰∏ª‰ΩìÂÜÖÂÆπ
        VStack{
            if showScanView {
                Text("üóÇ")
                    .font(.system(size: 100))
                    .padding(.bottom, -10)

                VStack(alignment: .center, spacing: 10) {
                    HStack(alignment: .center, spacing: 10) {
                        Circle()
                            .fill(Color.red)
                            .frame(width: 10, height: 10)
                            
                        Text("Â∫îÁî®Á®ãÂ∫èÁÆ°ÁêÜ")
                            .font(.system(size: 26))
                    }
                    Text("Êâ´ÊèèMac‰∏äÁöÑÊâÄÊúâÂ∫îÁî®Á®ãÂ∫èÂèäÂÖ∂Áõ∏ÂÖ≥Êñá‰ª∂„ÄÇ")
                        .foregroundColor(.secondary)
                        .font(.system(size: 15))
                }
                .contentShape(Rectangle())
                .padding(.top, 15)
                .padding(.bottom, 20)
        
                if progress>0.00 {
                    CustomCircularProgressBar(progress: $progress, CColor: $buttonColor)
                        .frame(width: 60, height: 60)
                } else{
                    CustomButton(buttonText: "Êâ´ÊèèÂ∫îÁî®", action: run, buttonColor: $buttonColor, isRunning: $isRunning)
                }
                
            } else {
                appList
            }
        }
        .frame(minHeight:600)
        .frame(width: 730)
    }
    
    //ÂàóË°®ËßÜÂõæ
    var appList: some View {
        VStack {
            HStack {
                List(appIcons.indices, id: \.self, selection: $selectedApps) { index in
                    HStack {
                        
                        Button(action: {}, label: {
                            EmptyView()
                        })
                        .buttonStyle(BorderlessButtonStyle())
                        .frame(width: 0, height: 0)
                        .contextMenu {
                            Button(action: {
                                let appPath = appURLs[index].deletingLastPathComponent()
                                let workspace = NSWorkspace.shared
                                var isDirectory: ObjCBool = true

                                if FileManager.default.fileExists(atPath: appPath.path, isDirectory: &isDirectory) {
                                    workspace.activateFileViewerSelecting([appURLs[index]])
                                }
                            }, label: {
                                HStack {
                                    Text("Êü•ÁúãÁ®ãÂ∫èÊâÄÂú®‰ΩçÁΩÆ")
                                }
                            })
                        }
                        
                        Toggle(isOn: Binding<Bool>(
                            get: { self.selectedApps.contains(index) },
                            set: { isSelected in
                                if isSelected {
                                    self.selectedApps.insert(index)
                                } else {
                                    self.selectedApps.remove(index)
                                }
                            })) {
                                EmptyView()
                            }
                            .toggleStyle(.checkbox)
                        
                        Image(nsImage: appIcons[index])
                            .resizable()
                            .scaledToFit()
                            .frame(width: 50, height: 50)
                        Text(appNames[index])
                            .padding(.leading, 10)
                        Spacer()
                        if let appInfo = appInfos[index]?[1] {
                            if appInfo == "Ê£ÄÊµã‰∏≠..." {
                                Text("üîÜ").padding(.leading, 10)
                            }else{
                                Text(appInfo)
                                    .padding(.leading, 10)
                            }
                        } else {
                            Text("")
                                .padding(.leading, 10)
                        }
                        
                    }
                }.onChanges(of: selectedApps) { _ in
                    selectedFiles = Set<Int>()
                    if let firstElement = selectedApps.first,
                       let files = appFiles[firstElement] {
                        selectedFiles = Set(files.keys.sorted())
                        
                        //print(appFiles[firstElement])
                    }
                }
                
                Spacer()
                
                if let firstElement = selectedApps.first,
                    let files = appFiles[firstElement] {
                    //, selection: $selectedFiles
                    List(files.keys.sorted(), id: \.self) { fileTypeId in
                        HStack {
                            Button(action: {}, label: {
                                EmptyView()
                            })
                            .buttonStyle(BorderlessButtonStyle())
                            .frame(width: 0, height: 0)
                            .contextMenu {
                                Button(action: {
                                    if let appPath = files[fileTypeId]?[0] {
                                        let workspace = NSWorkspace.shared
                                        var isDirectory: ObjCBool = true

                                        if FileManager.default.fileExists(atPath: appPath, isDirectory: &isDirectory) {
                                            workspace.activateFileViewerSelecting([URL(fileURLWithPath: appPath)])
                                        }
                                    }

                                }, label: {
                                    HStack {
                                        Text("Êü•ÁúãÊñá‰ª∂ÊâÄÂú®‰ΩçÁΩÆ")
                                    }
                                })
                            }
                            
                            Toggle(isOn: Binding<Bool>(
                                get: { self.selectedFiles.contains(fileTypeId) },
                                set: { isSelected in
                                    if isSelected {
                                        self.selectedFiles.insert(fileTypeId)
                                    } else {
                                        self.selectedFiles.remove(fileTypeId)
                                    }
                                })) {
                                    EmptyView()
                                }
                                .toggleStyle(.checkbox)
                            if let image = FindLogo(at: files[fileTypeId]?[0] ?? "") {
                                Image(nsImage: image)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(width: 50, height: 50)
                            }
                            
                            Text(files[fileTypeId]?[0] ?? "Unknown")
                                .padding(.leading, 10)
                            Spacer()
                            Text(files[fileTypeId]?[1] ?? "Êú™Áü•")
                                .padding(.leading, 10)
                        }
                    }
                    .padding(.leading, -8)
                }else{
                    List(){}
                    .padding(.leading, -8)
                }
                
            }

            //Spacer()
            HStack {
                HStack {
                    VStack(alignment: .leading) {
                        if let firstElement = selectedApps.first {
                            if let appFrom = appInfos[firstElement]?[0] {
                                Text("Â∫îÁî®Êù•Ê∫ê: \(appFrom)")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }else{
                                Text("Â∫îÁî®Êù•Ê∫ê:Êú™Áü•")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }
                            if let appSize = appInfos[firstElement]?[1] {
                                Text("Â∫îÁî®Â§ßÂ∞è: \(appSize)")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }else{
                                Text("Â∫îÁî®Â§ßÂ∞è:Êú™Áü•")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }
                        }else{
                            Text("Â∫îÁî®Êù•Ê∫ê:Êú™Áü•")
                                .font(.system(size: 12))
                                .padding(.bottom, 6)
                            Text("Â∫îÁî®Â§ßÂ∞è:Êú™Áü•")
                                .font(.system(size: 12))
                                .padding(.bottom, 6)
                        }
                    }
                    Spacer()
                    VStack(alignment: .leading) {
                        if let firstElement = selectedApps.first {
                            if let appInstall = appInfos[firstElement]?[2] {
                                Text("Â∫îÁî®ÂÆâË£ÖÊó∂Èó¥:\(appInstall)")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }else{
                                Text("Â∫îÁî®ÂÆâË£ÖÊó∂Èó¥:Êú™Áü•")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }
                            if let appLast = appInfos[firstElement]?[3] {
                                Text("ÊúÄÂêé‰∏ÄÊ¨°ËøêË°å:\(appLast)")
                                    .font(.system(size: 12))
                                    .padding(.bottom, 6)
                            }else{
                                Text("ÊúÄÂêé‰∏ÄÊ¨°ËøêË°å:Êú™Áü•")
                                    .font(.system(size: 12))
                            }
                        }else{
                            Text("Â∫îÁî®ÂÆâË£ÖÊó∂Èó¥:Êú™Áü•")
                                .font(.system(size: 12))
                                .padding(.bottom, 6)
                            Text("ÊúÄÂêé‰∏ÄÊ¨°ËøêË°å:Êú™Áü•")
                                .font(.system(size: 12))
                        }
                    }
                }
                .padding(.leading, 15)
                .padding(.trailing, 20)
                
                //ÂàÜÂâ≤
                
                HStack {
                    VStack {
                        Text("Êâ´ÊèèÂèëÁé∞")
                            .font(.system(size: 18))
                        Text("Â∫îÁî®Á®ãÂ∫èÊÄªÂÖ±")
                            .font(.system(size: 12))
                    }
                    VStack {
                        Text("\(appCount)")
                            .font(.system(size: 32))
                    }
                    Spacer()
                    VStack{
                        if selectedApps == [] {
                            CustomButton(buttonText: "ÈáçÊñ∞Êâ´ÊèèÂ∫îÁî®", action: rescan, buttonColor: $buttonColorb, isRunning: $isRunningb)
                        }else{
                            CustomButton(buttonText: "ÁßªÈô§\(selectedApps.count)‰∏™È°πÁõÆ", action: uninstall, buttonColor: $buttonColor, isRunning: $isRunningb)
                        }
                        Text("ÊîæÂøÉ~‰ºöÂÖàÁßªÂä®Âà∞Â∫üÁ∫∏ÁØìüóë")
                            .font(.system(size: 9))
                        Text("(ÂÆå‰∫ÜÊÇ®ÂÜçÂÜ≥ÂÆöÂà∞Â∫ïÂà†‰∏çÂà†)")
                            .font(.system(size: 9))
                    }
                    .padding(.trailing, 30)
                }
                .frame(width: 310)
                .padding(.leading, 20)
                
                
            }
            .frame(height: 80)
            .background(Color("Background"))
            .padding(.top, -7)
        }
        
    }

    //Êâ´Êèè
    func run() {
        //Thread.sleep(forTimeInterval: updateInterval) Âª∂Ëøü
        isRunning = true    //ÈöêËóèÊåâÈíÆÊòæÁ§∫ËøõÂ∫¶Êù°
        let total = 100 //ËøõÂ∫¶Êù°ÈªòËÆ§Â§ßÂ∞è
        //Â¶ÇÊûúËøõÂ∫¶Êù°‰∏çÊòØ0.00Â∞±‰∏çÈáçÂ§çË∑ë‰∫Ü
        if progress>0.00 {
            return
        }
        
        /*
        let fileManager = FileManager.default
        let urls = fileManager.urls(for: .applicationDirectory, in: .localDomainMask).first!
        //Ëé∑Âèñapplication‰∏≠ÁöÑÊâÄÊúâÁ®ãÂ∫è
        appURLs = try! fileManager.contentsOfDirectory(at: urls, includingPropertiesForKeys: nil, options: .skipsHiddenFiles)
         */
        
        var count = 0
        
        DispatchQueue.global(qos: .userInitiated).async {
            let task = Process()
            task.executableURL = URL(fileURLWithPath: "/usr/bin/mdfind")
            task.arguments = ["kMDItemContentType == 'com.apple.application-bundle'", "-onlyin", "/Users/\(NSUserName())/Desktop", "-onlyin", "/Users/\(NSUserName())/Applications", "-onlyin", "/Applications"]

            let outputPipe = Pipe()
            task.standardOutput = outputPipe

            do {
                try task.run()
                task.waitUntilExit()

                let outputData = outputPipe.fileHandleForReading.readDataToEndOfFile()
                if let output = String(data: outputData, encoding: .utf8) {
                    let appPaths = output.components(separatedBy: "\n")
                    for path in appPaths {
                        if !path.isEmpty {
                            appURLs.append(URL(fileURLWithPath: path))
                        }
                    }
                }
            } catch {
                print(error.localizedDescription)
            }

            var i = 0
            for appURL in appURLs {
                let icon = NSWorkspace.shared.icon(forFile: appURL.path)
                let name = NSWorkspace.shared.urlForApplication(withBundleIdentifier: appURL.lastPathComponent)?.deletingPathExtension().lastPathComponent ?? appURL.lastPathComponent
                
                appIcons.append(icon)
                appNames.append(name)
                
                appInfos[i] =  [
                    0: "Ê£ÄÊµã‰∏≠...",
                    1: "Ê£ÄÊµã‰∏≠...",
                    2: "Ê£ÄÊµã‰∏≠...",
                    3: "Ê£ÄÊµã‰∏≠..."
                ]
                
                i += 1
                count += 1
                DispatchQueue.main.async {
                    progress = Double(count) / Double(total)
                }
                
            }
            
            
            appCount = appIcons.count
            isRunning = false
            isRunningb = true
            showScanView = false    //ÈöêËóèÊâ´ÊèèÈ°µÈù¢
            
            DispatchQueue.global(qos: .userInitiated).async {
                getAppS()
            }
            
        }
       
        
    }
    
    //ÈáçÊñ∞Êâ´Êèè
    private func rescan() {
        progress = 0.0
        showScanView = true
        
        appURLs = []//APPË∑ØÂæÑ
        appIcons = []    //APP_LOGO
        appNames = [] //APPÂêçÂ≠ó
        appInfos = Dictionary.init() //APPÂ§ßÂ∞è
        appCount = 0 //ÊÄªAPPÊï∞
        
        isRunningb = true
        
        selectedApps.removeAll()
        selectedFiles.removeAll()
 
        run()
    }
    
    //ÂºÄÂßãËé∑ÂèñAPPËØ¶ÁªÜ‰ø°ÊÅØ
    private func getAppS() {
        let byteCountFormatter = ByteCountFormatter()
        byteCountFormatter.allowedUnits = [.useKB, .useMB, .useGB]
        byteCountFormatter.countStyle = .file
        
        
        var i = 0
        var abundleIdentifier = "Êú™Áü•"
        var acreationDate = "Êú™Áü•"
        var amodificationDate = "Êú™Áü•"
        
        let fileManager = FileManager.default
        
        appURLs.forEach { (appUrl: URL) in
            //ÈªòËÆ§ÂÄº
            abundleIdentifier = "Êú™Áü•Êù•Ê∫ê"
            acreationDate = "Êú™Áü•"
            amodificationDate = "Êú™Áü•"
            
            do {
                let attributes = try fileManager.attributesOfItem(atPath: appUrl.path)
                //  Ëé∑ÂèñÂ∫îÁî®Á®ãÂ∫èÊù•Ê∫ê
                let receiptUrl = appUrl.appendingPathComponent("Contents/_MASReceipt/receipt")
                if fileManager.fileExists(atPath: receiptUrl.path) {
                    abundleIdentifier = "App Store"
                } /* else {
                   let appBundle = Bundle(url: appUrl)
                   if let bundleIdentifier = appBundle?.bundleIdentifier {
                       abundleIdentifier = "Â§ñÈÉ®ÂÆâË£Ö"
                       print("Source application identifier for '\(appUrl.lastPathComponent)': \(bundleIdentifier)")
                   }
                }*/

                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"

                if let creationDate = attributes[.creationDate] as? Date {
                    // Â∫îÁî®Á®ãÂ∫èÂàõÂª∫Êó∂Èó¥
                    acreationDate = dateFormatter.string(from: creationDate)
                }
                if let modificationDate = attributes[.modificationDate] as? Date {
                    // Â∫îÁî®Á®ãÂ∫è‰øÆÊîπÊó∂Èó¥/ÊúÄÂêé‰∏ÄÊ¨°ËÆøÈóÆÊó∂Èó¥
                    amodificationDate = dateFormatter.string(from: modificationDate)
                }
            } catch {
                // Â§ÑÁêÜÈîôËØØ
            }
            
            //Ëé∑ÂèñÂ∫îÁî®Á®ãÂ∫èÊÄªÂ§ßÂ∞è
            let fileSize = FileSize(at: appUrl)
            
            appInfos[i] = [
                0: "\(abundleIdentifier)",
                1: "\(byteCountFormatter.string(fromByteCount: Int64(fileSize)))",
                2: "\(acreationDate)",
                3: "\(amodificationDate)"
            ]
            
            
            
            if let appBundle = Bundle(url: appUrl) {
                guard let bundleIdentifier = appBundle.bundleIdentifier else {
                    print("Bundle Identifier not found.")
                    i += 1
                    return
                }
                let preferencesPath = "\(NSHomeDirectory())/Library/Preferences/\(bundleIdentifier).plist"
                // ‰ΩøÁî® preferencesPath ËøõË°åËøõ‰∏ÄÊ≠•Êìç‰Ωú
                
                var gli = 0 //Êï∞ÊçÆËÆ°Êï∞
                //ÂÖàÁªô‰∫àËµãÂÄºÔºåÂê¶Âàô‰∏ãÈù¢Êó†Ê≥ïÁõ¥Êé•‰ΩøÁî®appFiles[i]?[0]
                appFiles[i] = [:]
                
                if FileManager.default.fileExists(atPath: preferencesPath) {
                    appFiles[i]?[gli] = [
                        0: "\(preferencesPath)",
                        1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:preferencesPath)))))"
                    ]
                    gli += 1
                }

                let PreferencesDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Preferences/")
                let PreferencesDirectoryContents = try? FileManager.default.contentsOfDirectory(atPath: PreferencesDirectoryURL.path)

                if let PreferencesDirectoryContents = PreferencesDirectoryContents {
                    for directoryName in PreferencesDirectoryContents {
                        let directoryPath = "\(PreferencesDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }
                
                
                let cacheDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Caches/")
                let cacheDirectoryContents = try? FileManager.default.contentsOfDirectory(atPath: cacheDirectoryURL.path)

                if let cacheDirectoryContents = cacheDirectoryContents {
                    for directoryName in cacheDirectoryContents {
                        let directoryPath = "\(cacheDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }
                
                let SupportDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Application Support/")
                let SupportDirectoryContents = try? FileManager.default.contentsOfDirectory(atPath: SupportDirectoryURL.path)

                if let SupportDirectoryContents = SupportDirectoryContents {
                    for directoryName in SupportDirectoryContents {
                        let directoryPath = "\(SupportDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }

                
                let SDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Saved Application State/")
                let SContents = try? FileManager.default.contentsOfDirectory(atPath: SDirectoryURL.path)

                if let SDirectoryContents = SContents {
                    for directoryName in SDirectoryContents {
                        let directoryPath = "\(SDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }

                let ScriptsDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Application Scripts/")
                let ScriptsContents = try? FileManager.default.contentsOfDirectory(atPath: ScriptsDirectoryURL.path)

                if let ScriptsDirectoryContents = ScriptsContents {
                    for directoryName in ScriptsDirectoryContents {
                        let directoryPath = "\(ScriptsDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }
                
                let CDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Containers/")
                let CContents = try? FileManager.default.contentsOfDirectory(atPath: CDirectoryURL.path)

                if let CDirectoryContents = CContents {
                    for directoryName in CDirectoryContents {
                        let directoryPath = "\(CDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }
                
                //Êó•ÂøóÊñá‰ª∂ÊîæÂú®ÊúÄÂêé
                let LogsDirectoryURL = URL(fileURLWithPath: "\(NSHomeDirectory())/Library/Logs/")
                let LogsDirectoryContents = try? FileManager.default.contentsOfDirectory(atPath: LogsDirectoryURL.path)

                if let LogsDirectoryContents = LogsDirectoryContents {
                    for directoryName in LogsDirectoryContents {
                        let directoryPath = "\(LogsDirectoryURL.path)/\(directoryName)"
                        if directoryName.contains(bundleIdentifier) && FileManager.default.isDirectory(url: URL(fileURLWithPath: directoryPath)) {
                            appFiles[i]?[gli] = [
                                0: "\(directoryPath)",
                                1: "\(byteCountFormatter.string(fromByteCount: Int64(FileSize(at: URL(fileURLWithPath:directoryPath)))))"
                            ]
                            gli += 1
                        }
                    }
                }
                
                //Ê†πÊçÆÂ§ßÂ∞èËøõË°åÊéíÂ∫è
                var filesArray = appFiles[i]?.map { $0.value } ?? []  // ËΩ¨Êç¢‰∏∫ÂèØÂèòÊï∞ÁªÑ
                filesArray.sort { (dict1, dict2) -> Bool in
                    if let value1 = dict1[1], let intValue1 = convertToBytes(value1),
                       let value2 = dict2[1], let intValue2 = convertToBytes(value2)
                    {
                        return intValue1 > intValue2
                    }
                    return false
                }
                appFiles[i] = filesArray.enumerated().reduce(into: [:]) { (dict, element) in
                    dict[element.offset] = element.element
                }
                //ÈáçÂÜôÊéíÂ∫èÂÆåÊàê
                
            } else {
                print("Bundle does not exist.")
            }
            
            //Êâ´ÊèèÂÆåÁ¨¨‰∏Ä‰∏™ÁöÑÂ∞±ÂèØ‰ª•ÈªòËÆ§ÈÄâ‰∏≠‰∫Ü
            if i == 0 {
                selectedApps = Set<Int>([0])//ÈªòËÆ§ÈÄâ‰∏≠Á¨¨‰∏ÄÈ°π
            }
            i += 1
        }

        isRunningb = false  //ÂºÄÊîæÊåâÈíÆ
        selectedApps = Set<Int>()   //ÂèñÊ∂àÈÄâ‰∏≠‰ª•ÂÖçËØØÂà†
    }
    
    private func uninstall(){
        var Files = ""
        let sortedSelection = selectedApps.sorted().reversed()
        
        
        //ÂØπÈúÄË¶ÅÁßªÈô§ÁöÑÊñá‰ª∂ËøõË°åÂè†Âä†Â§ÑÁêÜ
        for ind in sortedSelection {
            
            //Â§ÑÁêÜÊéâfile:// ‰ªÖÈôê.app Êñá‰ª∂
            let a = "\(appURLs[ind]) "  //Á©∫Ê†ºÊòØ‰∏∫‰∫Ü‰øùÁïôÊúÄÂêé‰∏Ä‰∏™/ ‰∏çË¢´Â§ÑÁêÜÊéâ
            let index = a.index(a.startIndex, offsetBy: 7) // Ëé∑ÂèñÁ¨¨3‰∏™Â≠óÁ¨¶ÁöÑ‰ΩçÁΩÆ
            let b = String(a[index...]) // Êà™ÂèñÂ≠óÁ¨¶‰∏≤‰ªéÁ¨¨3‰∏™Â≠óÁ¨¶Âà∞ÁªìÂ∞æ
            //Â§ÑÁêÜÊéâ‰∏≠ÊñáËΩ¨‰πâÁöÑÊñá‰ª∂Âêç
            var url = URL(fileURLWithPath: b)
            
            //‰ºòÂåñÂè™Âà†Èô§.app Êñá‰ª∂ÈóÆÈ¢ò Â¶ÇÊûúÂú®ÂÆûÁî®Â∑•ÂÖ∑‰∏≠ÁöÑÂ∫îÁî®ÂàôÂè™Âà†Èô§Âà∞ÂÆûÁî®Â∑•ÂÖ∑ÁöÑÊñá‰ª∂Â§πÔºå‰∏çÁÑ∂ÂàôÂà†Èô§Âà∞Â∫îÁî®Á®ãÂ∫èÁöÑÊñá‰ª∂Â§πÔºåÂ¶ÇÊûúË∑ØÂæÑ‰∏≠ÂåÖÂê´app/ContentsËØ¥ÊòéÊòØÂú®.app ‰∏≠ÁöÑÂ∫îÁî®ÔºåÊàñScripting Â±û‰∫éÁ®ãÂ∫èÊñá‰ª∂Â§π‰∏≠ÁöÑËÑöÊú¨Â∫îÁî®ÔºåÂàô‰∏çÊâßË°åËØ•Â§ÑÁêÜÔºåÂè™Âà†Èô§ÊåáÂÆö.app
            var parentURL = url.deletingLastPathComponent()
            var testUrl = parentURL
            parentURL.deleteLastPathComponent()
            while parentURL.path != "/Applications" && parentURL.path != "/Applications/Utilities" && !parentURL.path.contains("app/Contents") && !parentURL.path.contains("Scripting") {
                testUrl = parentURL
                parentURL.deleteLastPathComponent()
                
                //ÈÅøÂÖçÂá∫Áé∞Ê≠ªÂæ™ÁéØ
                if testUrl.path == "/" {
                    testUrl = url.deletingLastPathComponent()   //ÊÅ¢Â§çÂéüÂßãÁöÑË∑ØÂæÑ
                    break   //Ë∑≥Âá∫Âæ™ÁéØ
                }
            }
            url = URL(fileURLWithPath: "\(testUrl.path)/ ")
            //Â§ÑÁêÜÂÆåÊàê
            
            if let unescapedPath = url.path.removingPercentEncoding {
                let lasta = "\(unescapedPath)AincoÁªìÊùü"
                let lastb = lasta.replacingOccurrences(of: " AincoÁªìÊùü", with: "")
                
                //Á©∫Ê†ºËΩ¨‰πâ
                var lastc = lastb.replacingOccurrences(of: " ", with: "\\ ")
                //Êã¨Âè∑ËΩ¨‰πâ
                lastc = lastc.replacingOccurrences(of: "(", with: "\\(")
                lastc = lastc.replacingOccurrences(of: ")", with: "\\)")
                lastc = lastc.replacingOccurrences(of: "[", with: "\\[")
                lastc = lastc.replacingOccurrences(of: "]", with: "\\]")
                
                Files += "\(lastc) "
            }
            
            //Â§ÑÁêÜÂÖ≥ËÅîÊñá‰ª∂ Â¶ÇÊûúÂè™ÊòØÈÄâ‰∏≠‰∫Ü‰∏Ä‰∏™ÂàôÂèØÈÄâÂÖ≥ËÅîÊñá‰ª∂ Â§ö‰∏™ÂàôÁªü‰∏ÄÂÖ®ÈÉ®ÁßªÈô§
            if selectedApps.count == 1 {
                //Ëé∑ÂèñÊâÄÈÄâÁ®ãÂ∫èÂÖ≥ËÅîÊñá‰ª∂ÊâÄÈÄâÈ°π
                let FileSelection = selectedFiles.sorted().reversed()
                for File in FileSelection {
                    if let unwrappedStr = appFiles[ind]?[File]?[0] {
                        Files += "\(unwrappedStr.replacingOccurrences(of: " ", with: "\\ ")) "
                    }
                }
            }else{
                if let appUrls = appFiles[ind] {
                    for (_, subDict1) in appUrls {
                        if let unwrappedStr = subDict1[0] {
                            let file = unwrappedStr.replacingOccurrences(of: " ", with: "\\ ")
                            Files += "\(file) "
                        }
                    }
                }
            }
        }

        if Files != "" {
            mvFiles(Files: Files) { s in
                if s == 0 {
                    reMove()
                } else if s == 1 {
                    showAlert(title: "Êú™Áü•ÈîôËØØÔºåËØ∑ÈáçËØï„ÄÇ")
                }
                isRunningb = false
            }
        }else{
            showAlert(title: "ËØ∑ÂÖàÂãæÈÄâÊÇ®ÈúÄË¶ÅÁßªÈô§ÁöÑÊñá‰ª∂„ÄÇ")
            isRunningb = false
        }
    }
    
    private func reMove() {
        let sortedSelection = selectedApps.sorted().reversed()
        for index in sortedSelection {
            appIcons.remove(at: index)
            appNames.remove(at: index)
            
            appURLs.remove(at: index)
            
            //Âà†Èô§ÂÖ≥ËÅîÊñá‰ª∂Âπ∂ÈáçÊñ∞ÊéíÂ∫è
            appFiles.removeValue(forKey: index)
            let cFKeys = appFiles.keys.sorted()

            var sortedAppFiles = Dictionary<Int, Dictionary<Int, Dictionary<Int, String>>>()

            for (newIndex, key) in cFKeys.enumerated() {
                if let value = appFiles[key] {
                    sortedAppFiles[newIndex] = value
                }
            }
            appFiles = sortedAppFiles
            //
            //Âà†Èô§Â∫îÁî®‰ø°ÊÅØÂπ∂ÈáçÊñ∞ÊéíÂ∫è
            appInfos.removeValue(forKey: index)
            let IFKeys = appInfos.keys.sorted()

            var sortedappInfos = Dictionary<Int,Dictionary<Int,String>>()

            for (newIndex, key) in IFKeys.enumerated() {
                if let value = appInfos[key] {
                    sortedappInfos[newIndex] = value
                }
            }
            appInfos = sortedappInfos
            //
        }
        self.selectedApps = Set<Int>()
        selectedApps = Set<Int>()
        appCount = appIcons.count
    }
    
}
